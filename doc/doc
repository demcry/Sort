 Введение: 


Данная спецификация требований описывает поведение приложения - аналога утилиты sort "sorting" (далее - ПРИЛОЖЕНИЯ), его функциональные и нефункциональные требования. 


Краткий обзор: 


Спецификация требований состоит из трёх разделов: общего описания, детальных требований и описание готового приложения. Введение представляет собой вводную информацию по пользованию данной спецификацией, а также содержит в себе описание целей и конечной пользовательской аудитории продукта. В общем описании указываются общие факторы, влияющие на ПРИЛОЖЕНИЕ и требования, предъявляемые к нему. Раздел «Детальные требования» включает в себя описание всех требований к ПРИЛОЖЕНИЮ. 



Определения, акронимы и сокращения: 


ПРИЛОЖЕНИЕ – приложение "sorting" 


Предполагаемая аудитория: 


Предполагаемой аудиторией ПРИЛОЖЕНИЯ являются пользователи CentOS 6.6+. 



1.Общее описание: 


1.1.Видение продукта: 

ПРИЛОЖЕНИЕ представляет собой аналог утилиты sort и служит для поиска фалов по имени и другим параметрам. Приложение может быть скомилировано при помощи '$ make' и установлено при помощи '$ make install'. 


1.2.Функциональность продукта: 


ПРИЛОЖЕНИЕ выполняет следующие функции: 


1.Вывод сообщения о назначении приложения
2.Вывод VERSION с описанием версии приложения 
3.Вывод HELP с описанием работы приложения 
4.Сортировка строк по алфавиту
5.Сортировка строк в обратном алфавитном порядке
6.Сортировка строк с учетом регистра
7.Сортировка строк без учета регистра


1.3.Среда функционирования продукта (операционная среда): 

 Операционная система: Linux



2.Детальные требования: 


2.1. Функциональные требования: 

В данном пункте описываются все функциональные требования к приложению, отсортированные в порядке приоритета. 

1.Вывод сообщения о назначении приложения
2.Вывод VERSION с описанием версии приложения 
3.Вывод HELP с описанием работы приложения 
4.Сортировка строк по алфавиту
5.Сортировка строк в обратном алфавитном порядке
6.Сортировка строк с учетом или без учёта регистра
7.Случайная сортировка (перестановка) строк

2.2. Нефункциональные требования: 

1. Приложение должно иметь возможность компиляции при помощи '$ make'. 
2. Приложение должно иметь возможность установки  в системные каталоги при помощи '$ make install'. 
3. Приложение должно иметь возможность удаления из системных каталогов при помощи '$ make uninstall'. 
4. Приложение должно иметь возможность удаления объектных и исполняемых файлов, созданных в процессе компиляции при помощи '$ make clean'.


2.3. Требования к внешним интерфейсам: 
 Интерфейсы оборудования: 

Для корректной работы программы на ПК должно быть установлено следующее программное обеспечение: 

1. CentOS Enterprise Linux 6.6 (или выше) based дистрибутив, либо другой аналогичный; 
2. gcc 4.7 или выше. 


3. Описание приложения

3.1. Установка приложения

Приложение может быть установлено на платформе Linux, с установленным компилятором gcc версии 4.7 или выше.
Процесс установки (в терминале Linux):
  git clone git@github.com:demcry/Sort.git
  cd Sort/src
  make
  sudo make install


3.2. Код программы (Версия 2.3b)
Код на GitHub:
  https://github.com/demcry/Sort

3.3. Архитектура программы

3.3.1. Внешняя архитектура:
Для вывода страницы помощи используется команда 'sorting -h'.
Для определения текущей версии приложения - 'sorting -v'.
По умолчанию строки берутся из стандартного потока ввода (stdin), если пользователь хочет отсортировать файл, нужно указать его название: 'sorting filename.x'. 
Примечание: если в строке аргументов указано более одного файла, то все кроме первого будут проигнорированы.
Результат записывается в стандартный поток вывода (stdout), его можно перенаправить в файл: 'sorting >output.x'.
Благодаря возможности работы со стандартными потоками, sorting можно использовать в комбинации с другими приложениями через конвейер.
Приложение имеет разные режимы сортировки, которые задаются ключами:
  -a	   В лексикографическом порядке (по умолчанию)
  -r	   В обратном порядке
  -i	   Без учёта регистра (комбинируется с предыдущими)
  -R	   Случайная перестановка строк
Подробнее о всех ключах можно узнать из страницы помощи.


3.3.2. Внутренняя архитектура:
  При запуске программа анализирует полученные аргументы. Если хотя бы один ключ неверен, то выводится сообщение об ошибке с подсказкой о файле помощи. Любой аргумент, не начинающийся с '-', будет воспринят как имя файла. Если в строке нет файлов, входные данные берутся из стандартного потока ввода (stdin). Любой файл после первого будет проигнорирован. Если указанный файл не удаётся открыть, программа сообщит об ошибке и завершится. 
  Когда все аргументы проанализированы и текущий режим сортировки установлен, происходит считывание строк в динамически расширяющийся массив. Признаком конца ввода является стандартный символ EOF. Чтобы завершить ввод в терминале необходимо нажать <Enter> и <Ctrl-D>, либо <Ctrl+D> 3 раза, если ввод не заканчивается на <Enter>. Если считывание осуществлялось из файла, он закрывается.
  Далее, в зависимости от режима, вызывается функция qsort из стандартной библиотеки C (stdlib) с одной из 5 возможных функций сравнения (-a, -ai, -r, -ri, -R). Строки из отсортированного массива выводятся в стандартный поток вывода (stdout). Пользователь может перенаправить его в файл средствами shell: 'sorting >output.x'. После этого освобождается память, выделенная под массив и программа завершается.


3.4. Руководство для пользователя:

Использование: sorting [ключ] [файл]...
Ключи:
  -h, --help		Показать эту информацию и выйти
  -a, --alphabet		Сортировать строки в лексикографическом порядке
  -r, --reverse		Сортировать строки в обратном порядке
  -i, --ignore-case	Игнорировать регистр
  -R, --random		Случайная перестановка
  -v, --version		Показать информацию о версии и выйти

Ключи по умолчанию: --alphabet
Если файл не указан, входные данные будут взяты из stdin, поэтому вы также можете комбинировать сортировку с другими процессами.
Чтобы завершить ввод используйте <Enter>+<Ctrl+D> или <Ctrl+D> 3 раза.


4. Тестирование
	<add>
